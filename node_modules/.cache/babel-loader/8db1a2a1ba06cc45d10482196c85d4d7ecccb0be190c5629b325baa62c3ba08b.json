{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Begum\\\\OneDrive\\\\Documents\\\\reactjsProjects\\\\01-starting-project\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from './Component/Header';\nimport Table from './Component/Table';\nimport UserForm from './Component/UserForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [yearlyDataSet, setYearlyData] = useState('');\n  const [data, setData] = useState({\n    'current-savings': 0,\n    'yearly-contribution': 0,\n    'expected-return': 0,\n    duration: 0\n  });\n  const calculateHandler = userInput => {\n    userInput.preventDefault();\n    console.log(data['current-savings'], 'userInput');\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    setData(prevdata => {\n      return {\n        ...prevdata,\n        ...data\n      };\n    });\n    // per-year results\n    const yearlyData = [];\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // console.log(yearlyData, 'd', currentSavings, 'e', yearlyContribution, 'f', expectedReturn, 'g', duration);\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setData(prevdata => {\n      return {\n        ...prevdata,\n        ...data\n      };\n    });\n    console.log(data, 'data');\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserForm, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"geFzGEvEwh0azUIZeLX6aq6ajYg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Table","UserForm","jsxDEV","_jsxDEV","App","_s","data","setData","duration","calculateHandler","userInput","preventDefault","console","log","prevdata","yearlyData","currentSavings","yearlyContribution","expectedReturn","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Begum/OneDrive/Documents/reactjsProjects/01-starting-project/01-starting-project/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from './Component/Header';\nimport Table from './Component/Table';\nimport UserForm from './Component/UserForm';\n\nfunction App() {\n  // const [yearlyDataSet, setYearlyData] = useState('');\n  const [data, setData] = useState({\n    'current-savings': 0,\n    'yearly-contribution': 0,\n    'expected-return': 0,\n    duration: 0,\n  });\n  const calculateHandler = (userInput) => {\n    userInput.preventDefault();\n    console.log(data['current-savings'], 'userInput');\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    setData(prevdata => {\n      return { ...prevdata, ...data }\n    })\n    // per-year results\n    const yearlyData = [];\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // console.log(yearlyData, 'd', currentSavings, 'e', yearlyContribution, 'f', expectedReturn, 'g', duration);\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    setData(prevdata => {\n      return { ...prevdata, ...data }\n    })\n    console.log(data, 'data');\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n      <UserForm data={data} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {/* <Table data={data} /> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAC/B,iBAAiB,EAAE,CAAC;IACpB,qBAAqB,EAAE,CAAC;IACxB,iBAAiB,EAAE,CAAC;IACpBU,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtCA,SAAS,CAACC,cAAc,CAAC,CAAC;IAC1BC,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC,iBAAiB,CAAC,EAAE,WAAW,CAAC;IACjD;IACA;IACAC,OAAO,CAACO,QAAQ,IAAI;MAClB,OAAO;QAAE,GAAGA,QAAQ;QAAE,GAAGR;MAAK,CAAC;IACjC,CAAC,CAAC;IACF;IACA,MAAMS,UAAU,GAAG,EAAE;IACrB,IAAIC,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMO,kBAAkB,GAAG,CAACP,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMQ,cAAc,GAAG,CAACR,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMF,QAAQ,GAAG,CAACE,SAAS,CAAC,UAAU,CAAC;;IAEvC;;IAEA;IACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,QAAQ,EAAEW,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGJ,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAII,cAAc,GAAGH,kBAAkB;MACrDF,UAAU,CAACM,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEP,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAV,OAAO,CAACO,QAAQ,IAAI;MAClB,OAAO;QAAE,GAAGA,QAAQ;QAAE,GAAGR;MAAK,CAAC;IACjC,CAAC,CAAC;IACFM,OAAO,CAACC,GAAG,CAACP,IAAI,EAAE,MAAM,CAAC;IACzB;EACF,CAAC;;EAED,oBACEH,OAAA;IAAAqB,QAAA,gBACErB,OAAA,CAACJ,MAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzB,OAAA,CAACF,QAAQ;MAACK,IAAI,EAAEA;IAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIrB,CAAC;AAEV;AAACvB,EAAA,CArDQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAuDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}